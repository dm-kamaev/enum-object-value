// 1. downcast to string
// 2. get name of enum

type ArrayElement<ArrayType extends readonly unknown[]> = ArrayType extends readonly (infer ElementType)[]
  ? ElementType
  : never;

type _GetKeys<T> = T extends { name: string | number } ? T['name'] : never;
type _GetValues<T> = T extends { value: any } ? T['value'] : never;

type GetKeys<T extends ReadonlyArray<{ name: string | number; value: any }>> = _GetKeys<ArrayElement<T>>;
type GetValues<T extends ReadonlyArray<{ name: string | number; value: any }>> = _GetValues<ArrayElement<T>>;

const userRole = [
  { name: 'ADMIN', value: 'ADMIN' },
  { name: 'ROOT', value: 'ROOT' },
  { name: 'EMPLOYEE', value: 'EMPLOYEE' },
] as const;
type Result2 = GetKeys<typeof userRole>;

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;

type RecordCast = Record<string | number, any>;

type ConvertToPair<T> = T extends { name: string; value: any } ? { [index in T['name']]: T['value'] } : never;
type MergeArrayToObject<T extends ReadonlyArray<{ name: string | number; value: any }>> = UnionToIntersection<
  ConvertToPair<ArrayElement<T>>
>;

type ConvertToPair2<T> = T extends { name: string } ? { [index in T['name']]: T['name'] } : never;
type 小reateHashName<T extends ReadonlyArray<{ name: string | number; value: any }>> = UnionToIntersection<
  ConvertToPair2<ArrayElement<T>>
>;

// type Result5555 = 小reateHashName<typeof userRole>;

type Mutable<T> = {
  -readonly [K in keyof T]: T[K] extends string
    ? string
    : T[K] extends number
      ? number
      : T[K] extends number
        ? number
        : T[K] extends [string]
          ? string[]
          : T[K] extends infer Object
            ? Mutable<Object>
            : never;
};

// eslint-disable-next-line no-use-before-define
type DeepMutableArray<T> = Array<DeepMutable<Mutable<T>>>;
type DeepMutableObject<T> = {
  // eslint-disable-next-line no-use-before-define
  [P in keyof T]-?: DeepMutable<Mutable<T[P]>>;
};

type DeepMutable<T> = T extends (...args: any[]) => any
  ? T
  : T extends any[]
    ? DeepMutableArray<T[number]>
    : T extends object
      ? DeepMutableObject<T>
      : T;

type UpCast<T> = { [K in keyof T]: T[K] extends string ? string : T[K] };

type Check<T> = T extends string[] ? true : false;
type Result3453534 = Check<readonly ['create:admin', 'create', 'remove', 'read']>;

class SuperEnum<
  List extends ReadonlyArray<{ name: string | number; value: any }> = ReadonlyArray<{
    name: string | number;
    value: any;
  }>,
> {
  public readonly prop: MergeArrayToObject<List> = {} as MergeArrayToObject<List>;
  public readonly type: 小reateHashName<List> = {} as 小reateHashName<List>;

  constructor(private readonly list: List) {
    list.forEach((el) => {
      this.prop[el.name] = el.value;
      this.type[el.name] = el.name;
    });
  }

  createAsIs<Name extends keyof MergeArrayToObject<List>>(name: Name, value: MergeArrayToObject<List>[Name]) {
    return new SuperEnum([{ name: name as string, value }]).get(name as string);
  }

  createByTemplate<Name extends keyof MergeArrayToObject<List>>(
    name: Name,
    value: DeepMutable<MergeArrayToObject<List>[Name]>,
  ) {
    return new SuperEnum([{ name: name as string, value }]).get(name as string);
  }

  createByGeneralizedTemplate<Name extends keyof MergeArrayToObject<List>>(
    name: Name,
    value: UpCast<DeepMutable<MergeArrayToObject<List>[Name]>>,
  ) {
    return new SuperEnum([{ name: name as string, value }]).get(name as string);
  }

  forEach(handler: (el: GetKeys<List>, value: GetValues<List>) => void) {
    this.list.forEach((el) => {
      handler(el.name as GetKeys<List>, el.value);
    });
  }

  get<K extends keyof MergeArrayToObject<List>>(name: K) {
    if (!(name in (this.prop as RecordCast))) {
      throw new Error(`Not found key: "${name as string}"`);
    }

    return this.prop[name];
  }

  getKeys() {
    return Object.keys(this.prop as Record<GetKeys<List>, GetValues<List>>) as Array<GetKeys<List>>;
  }

  getValues() {
    return Object.values(this.prop as Record<GetKeys<List>, GetValues<List>>) as Array<GetValues<List>>;
  }

  *[Symbol.iterator]() {
    const list = this.list;
    for (let i = 0, l = list.length; i < l; i++) {
      const el = list[i];
      yield { name: el.name as GetKeys<List>, value: el.value as GetValues<List> };
    }
  }
}

const list = [
  { name: 'ROOT', value: { value: 'root', permission: ['create:admin', 'create', 'remove', 'read'] } },
  { name: 'ADMIN', value: { value: 'admin', permission: ['create', 'remove', 'read'] } },
  { name: 'EMPLOYEE', value: { value: 'employee', permission: ['read'] } },
] as const;

type Test2324 = UpCast<
  DeepMutableObject<{
    readonly name: 'root';
    readonly value: {
      readonly value: 'ROOT';
      readonly permission: readonly ['create:admin', 'create', 'remove', 'read'];
    };
  }>
>;

type DebugName = Test2324['name'];
//   ^?
type DebugValue = Test2324['value'];
//   ^?

const test: Test2324['name'] = 'root';
const test222: Test2324['value'] = { value: 'root', permission: ['create:admin'] };

const userRoleEnum = new SuperEnum(list);
// type userRoleEnumValues = EnumValues<typeof userRoleEnum>;
type userRoleEnumValues = (typeof userRoleEnum)[keyof typeof userRoleEnum];
// const superEnum = new SuperEnum([ 'admin', true, root: true, employee: true });

const result = userRoleEnum.prop;
//    ^?
console.log(result);
const result2 = userRoleEnum.prop.ADMIN;
//    ^?
userRoleEnum.forEach((key, value) => {
  console.log(`${key} => ${value}`);
});
console.log('keys ==>', userRoleEnum.getKeys());
console.log('values ==>', userRoleEnum.getValues());
const str: string = 'admin';
const result3 = userRoleEnum.prop[str as GetKeys<typeof list>];
//    ^?
const result4 = userRoleEnum.get('ADMIN');
//     ^?

const admin = userRoleEnum.createAsIs('ADMIN', { value: 'admin', permission: ['create', 'remove', 'read'] });
const admin2 = userRoleEnum.createByGeneralizedTemplate('ADMIN', {
  value: 'admin1',
  permission: ['create', 'remove', 'read'],
});

for (const el of userRoleEnum) {
  console.log('Via iterator ', el);
}
const teste = userRoleEnum.type.ADMIN;

function example_switch_case(role: keyof (typeof userRoleEnum)['type'], input: typeof userRoleEnum) {
  switch (role) {
    case input.type.ADMIN:
      return userRoleEnum.createAsIs(role, { value: 'admin', permission: ['create', 'remove', 'read'] });
    case input.type.EMPLOYEE:
      return userRoleEnum.createAsIs(role, { value: 'employee', permission: ['read'] });
    default:
      throw new Error('Stop');
  }
}
const result234234 = example_switch_case('ADMIN', userRoleEnum);

function example_if_else(role: keyof (typeof userRoleEnum)['type'], userRole: userRoleEnumValues) {
  if (userRole) {
    console.log(role, input.value);
  }
}
// const result234234 = example_if_else('ADMIN', userRoleEnum);

enum userRoleNativeEnum {
  ADMIN = 'admin',
  EMPLOYEE = 'employee',
  ROOT = 'root',
}
if (userRoleNativeEnum.ADMIN === 'admin') {
  console.log('OK =>', userRoleNativeEnum.ADMIN);
}

const localTest: `${userRoleNativeEnum}` = 'admin';
console.log(localTest);

const inputKey = 'ADMIN' as string;
console.log('Result => ', userRoleNativeEnum[inputKey]);
